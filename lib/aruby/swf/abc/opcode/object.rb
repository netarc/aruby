module ARuby
  class SWF
    class ABC
      module OpCode
        # ID: 6 (0x06)
        # DESC: Sets the default XML namespace
        # STACK: ... => ...
        # index is a u30 that must be an index into the string constant pool. The string at index is used 
        # as the uri for the default XML namespace for this method.
        class DXNS < Base
          define_opcode 6, "dxns"
          struct do
            u30 :index
          end
        end
        
        # ID: 7 (0x07)
        # DESC: Sets the default XML namespace with a value determined at runtime
        # STACK: ..., value => ...
        # The top value on the stack is popped, converted to a string, and that string is used as the uri 
        # for the default XML namespace for this method. 
        class DXNSLate < Base
          define_opcode 7, "dxns_late"
        end
        
        # ID: 64 (0x40)
        # DESC: Create a new function object
        # STACK: ... => ..., function_obj
        # index is a u30 that must be an index of a method_info. A new function object is created 
        # from that method_info and pushed onto the stack. For a description of creating a new 
        # function object, see ECMA-262 section 13.2.  
        # When creating the new function object the scope stack used is the current scope stack when 
        # this instruction is executed, and the body is the method_body entry that references the 
        # specified method_info entry.
        class NewFunction < Base
          define_opcode 64, "new_function"
          struct do
            u30 :index
          end
        end
        
        # ID: 66 (0x42)
        # DESC: Construct an instance
        # STACK: ..., object, arg1, arg2, ..., argn => ..., value
        # arg_count is a u30 that is the number of arguments present on the stack. object is the 
        # function that is being constructed. This will invoke the [[Construct]] property on object with 
        # the given arguments. The new instance generated by invoking [[Construct]] will be pushed 
        # onto the stack.
        class Construct < Base
          define_opcode 66, "construct"
          struct do
            u30 :arg_count
          end
        end
        
        # ID: 73 (0x49)
        # DESC: Construct an instance of the base class
        # STACK: ..., object, arg1, arg2, ..., argn => ... 
        # arg_count is a u30 that is the number of arguments present on the stack. This will invoke the 
        # constructor on the base class of object with the given arguments.
        class ConstructSuper < Base
          define_opcode 73, "construct_super"
          struct do
            u30 :arg_count
          end
        end
        
        # ID: 74 (0x4A)
        # DESC: Construct a property
        # STACK: ..., obj, [ns], [name], arg1,...,argn  => ..., value
        # arg_count is a u30 that is the number of arguments present on the stack. The number of 
        # arguments specified by arg_count are popped off the stack and saved.  
        # index is a u30 that must be an index into the multiname constant pool. If the multiname at 
        # that index is a runtime multiname the name and/or namespace will also appear on the stack 
        # so that the multiname can be constructed correctly at runtime. 
        # obj is the object to resolve the multiname in. 
        # The property specified by the multiname at index is resolved on the object obj. The 
        # [[Construct]] property is invoked on the value of the resolved property with the arguments 
        # obj, arg1, ..., argn. The new instance generated by invoking [[Construct]] will be pushed 
        # onto the stack. 
        class ConstructProp < Base
          define_opcode 74, "construct_prop"
          struct do
            u30 :index
            u30 :arg_count
          end
          
          def to_s
            super " index=#{index}||#{@abc_file.multinames[index]} arg_count=#{arg_count}"
          end
        end
        
        # ID: 85 (0x55)
        # DESC: Create a new object
        # STACK: ..., name1, value1, name2, value2,...,nameN, valueN  => ..., newobj 
        # arg_count is a u30 that is the number of properties that will be created in newobj. There will 
        # be a total of arg_count name values on the stack, which will be of type String (name1 to 
        # nameN). There will be an equal number of values on the stack, which can be of any type, 
        # and will be the initial values for the properties  
        # A new value of type Object is created and assigned to newobj. The properties specified on the 
        # stack will be dynamically added to newobj. The names of the properties will be name1, 
        # name2,..., nameN and these properties will be set to the corresponding values (value1, 
        # value2,..., valueN). newobj is then pushed onto the stack. 
        class NewObject < Base
          define_opcode 85, "new_object"
          struct do
            u30 :arg_count
          end
        end

        # ID: 86 (0x56)
        # DESC: Create a new array
        # STACK: ..., value1, value2, ..., valueN  => ..., newarray
        # arg_count is a u30 that is the number of entries that will be created in the new array. There 
        # will be a total of arg_count values on the stack.  
        # A new value of type Array is created and assigned to newarray. The values on the stack will 
        # be assigned to the entries of the array, so newarray[0] = value1, newarray[1] = value2, ...., 
        # newarray[N-1] = valueN. newarray is then pushed onto the stack.
        class NewArray < Base
          define_opcode 86, "new_array"
          struct do
            u30 :arg_count
          end
        end
        
        # ID: 87 (0x57)
        # DESC: Create a new activation object
        # STACK: ... => ..., newactivation
        # Creates a new activation object, newactivation, and pushes it onto the stack. Can only be 
        # used in methods that have the NEED_ACTIVATION flag set in their MethodInfo entry.
        class NewActivation < Base
          define_opcode 87, "new_activation"
        end
        
        # ID: 88 (0x58)
        # DESC: Create a new class
        # STACK: ..., basetype => ..., newclass
        # index is a u30 that is an index of the ClassInfo that is to be created. basetype must be the 
        # base class of the class being created, or null if there is no base class. 
        # The class that is represented by the ClassInfo at position index of the ClassInfo entries is 
        # created with the given basetype as the base class. This will run the static initializer function 
        # for the class. The new class object, newclass, will be pushed onto the stack. 
        # When this instruction is executed, the scope stack must contain all the scopes of all base 
        # classes, as the scope stack is saved by the created ClassClosure.
        class NewClass < Base
          define_opcode 88, "new_class"
          struct do
            u30 :index
          end
        end
      end
    end
  end
end